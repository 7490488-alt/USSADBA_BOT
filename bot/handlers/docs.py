from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from config import settings
import os
import logging

logger = logging.getLogger(__name__)

def get_available_documents():
    if not os.path.exists(settings.documents_dir):
        return []
    return [
        f for f in os.listdir(settings.documents_dir)
        if f.lower().endswith(tuple(settings.allowed_document_types))
    ]

def create_docs_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏"""
    docs = get_available_documents()
    buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    for f in docs[:8]:
        doc_name = os.path.splitext(f)[0]
        buttons.append([KeyboardButton(f"üìé {doc_name}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    buttons.append([
        KeyboardButton("üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã"),
        KeyboardButton("üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    ])
    buttons.append([
        KeyboardButton("üìù –ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω"), 
        KeyboardButton("üìä –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å")
    ])
    
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

def create_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é"""
    keyboard = [
        ["üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã", "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"],
        ["üìù –ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω", "üìä –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def docs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã docs: {text}")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ - —Å —ç–º–æ–¥–∑–∏ –∏ –±–µ–∑
    if text in ["–î–æ–∫—É–º–µ–Ω—Ç—ã", "üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã"]:
        await list_documents(update, context)
        return

    if text in ["–ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω", "üìù –ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω"]:
        await send_business_plan(update, context)
        return

    if text in ["–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å", "üìä –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å"]:
        await send_financial_model(update, context)
        return

    if text in ["–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"]:
        await update.message.reply_text(
            "üí¨ –ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–µ–∫—Ç–µ!",
            reply_markup=create_main_keyboard()
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
    if text.startswith("üìé "):
        doc_name = text[2:]
        await send_document_by_name(update, context, doc_name)
        return

    await list_documents(update, context)

async def list_documents(update: Update, context: ContextTypes.DEFAULT_TYPE):
    docs = get_available_documents()
    if not docs:
        await update.message.reply_text(
            "üìÇ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.",
            reply_markup=create_main_keyboard()
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    msg = "üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n" + "\n".join([f"‚Ä¢ {os.path.splitext(f)[0]}" for f in docs])
    await update.message.reply_text(
        msg, 
        reply_markup=create_docs_keyboard()
    )

async def send_business_plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ò—â–µ–º —Ñ–∞–π–ª –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω–∞ (—Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏)
    docs = get_available_documents()
    business_plan = None
    
    for doc in docs:
        name = os.path.splitext(doc)[0].lower()
        if any(keyword in name for keyword in ["–±–∏–∑–Ω–µ—Å", "business", "–ø–ª–∞–Ω", "plan"]):
            business_plan = doc
            break
    
    if business_plan:
        file_path = os.path.join(settings.documents_dir, business_plan)
        try:
            with open(file_path, 'rb') as f:
                await update.message.reply_document(
                    f, 
                    caption="üìò –ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω –ø—Ä–æ–µ–∫—Ç–∞",
                    reply_markup=create_docs_keyboard()
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.",
                reply_markup=create_docs_keyboard()
            )
    else:
        await update.message.reply_text(
            "‚ùå –ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
            reply_markup=create_docs_keyboard()
        )

async def send_financial_model(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ò—â–µ–º —Ñ–∞–π–ª —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –º–æ–¥–µ–ª–∏ (—Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏)
    docs = get_available_documents()
    financial_model = None
    
    for doc in docs:
        name = os.path.splitext(doc)[0].lower()
        if any(keyword in name for keyword in ["—Ñ–∏–Ω–∞–Ω—Å", "financial", "–º–æ–¥–µ–ª—å", "model"]):
            financial_model = doc
            break
    
    if financial_model:
        file_path = os.path.join(settings.documents_dir, financial_model)
        try:
            with open(file_path, 'rb') as f:
                await update.message.reply_document(
                    f, 
                    caption="üìä –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å",
                    reply_markup=create_docs_keyboard()
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.",
                reply_markup=create_docs_keyboard()
            )
    else:
        await update.message.reply_text(
            "‚ùå –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
            reply_markup=create_docs_keyboard()
        )

async def send_document_by_name(update: Update, context: ContextTypes.DEFAULT_TYPE, doc_name: str):
    docs = get_available_documents()
    found = None
    
    # –ò—â–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ –∏–º–µ–Ω–∏ (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
    for f in docs:
        if doc_name.lower() in os.path.splitext(f)[0].lower():
            found = f
            break
    
    if found:
        file_path = os.path.join(settings.documents_dir, found)
        try:
            with open(file_path, 'rb') as f:
                await update.message.reply_document(
                    f, 
                    caption=f"üìé {os.path.splitext(found)[0]}",
                    reply_markup=create_docs_keyboard()
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.",
                reply_markup=create_docs_keyboard()
            )
    else:
        await update.message.reply_text(
            "‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=create_docs_keyboard()
        )