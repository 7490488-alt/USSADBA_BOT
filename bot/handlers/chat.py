from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from services.llm import YandexLLM
from services.history import load_history, save_history
from services.cache import cache
from utils.helpers import get_cache_key
from config import settings
import logging
import asyncio

logger = logging.getLogger(__name__)

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from services.llm import YandexLLM
from services.history import load_history, save_history
from services.cache import cache
from utils.helpers import get_cache_key
from config import settings
import logging
import asyncio

logger = logging.getLogger(__name__)

async def chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        logger.warning("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç")
        return

    user_message = update.message.text.strip()
    if not user_message:
        logger.warning("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏")
        return

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message}")

    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π —Å–º–µ–Ω—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if user_message.lower() in ["—Å–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç", "–¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å", "–Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"]:
        if "history" in context.chat_data:
            del context.chat_data["history"]
        if "selected_prompt" in context.user_data:
            del context.user_data["selected_prompt"]
        if "prompt_confirmed" in context.user_data:
            del context.user_data["prompt_confirmed"]
        
        keyboard = [["üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã", "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ–Ω—Ç
    if "llm_service" not in context.application.bot_data:
        logger.error("‚ùå llm_service –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    llm_service = context.application.bot_data["llm_service"]
    prompt_type = llm_service.determine_intent(user_message)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ user_data –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    context.user_data["selected_prompt"] = prompt_type

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)
    if "prompt_confirmed" not in context.user_data:
        prompt_names = {
            "buyer": "üè° –£—á–∞—Å—Ç–æ–∫ –¥–ª—è –∂–∏–∑–Ω–∏",
            "investor": "üíº –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", 
            "partner": "ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ",
            "general": "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ"
        }
        
        await update.message.reply_text(
            f"–Ø –ø–æ–Ω—è–ª, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: *{prompt_names[prompt_type]}*.\n"
            "–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å —Ç–µ–º—É, –Ω–∞–ø–∏—à–∏—Ç–µ '–°–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç'.",
            parse_mode="Markdown"
        )
        context.user_data["prompt_confirmed"] = True

    # –†–∞–±–æ—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    chat_id = update.effective_chat.id
    if "history" not in context.chat_data:
        loaded_history = await load_history(chat_id)
        sys_prompt = llm_service.select_prompt(prompt_type)
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏
        if not any(msg.get("role") == "system" for msg in loaded_history):
            loaded_history.insert(0, {"role": "system", "content": sys_prompt})
        context.chat_data["history"] = loaded_history

    history = context.chat_data["history"]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
    current_sys_prompt = llm_service.select_prompt(prompt_type)
    if history and history[0].get("role") == "system":
        history[0]["content"] = current_sys_prompt
    else:
        history.insert(0, {"role": "system", "content": current_sys_prompt})

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    cache_key = get_cache_key(user_message, history)
    if cache_key and (cached := await cache.get(cache_key)):
        response = cached
        history.append({"role": "user", "content": user_message})
        history.append({"role": "assistant", "content": response})
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        asyncio.create_task(save_history(chat_id, history))
        
        await update.message.reply_text(response)
        return

    # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ LLM
    try:
        response = await llm_service.chat(user_message, history, prompt_type)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ LLM: {e}", exc_info=True)
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    history.append({"role": "user", "content": user_message})
    history.append({"role": "assistant", "content": response})

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
    max_len = settings.max_history_pairs * 2 + 1  # +1 –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    if len(history) > max_len:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        system_prompt = history[0]
        recent = [msg for msg in history if msg["role"] in ("user", "assistant")][-max_len+1:]
        context.chat_data["history"] = [system_prompt] + recent

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ –∫—ç—à
    asyncio.create_task(save_history(chat_id, context.chat_data["history"]))
    if cache_key:
        asyncio.create_task(cache.set(cache_key, response))

    await update.message.reply_text(response)