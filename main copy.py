# main.py
import sys
import os
import asyncio
import logging
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –Ω–∞—á–∞–ª–æ sys.path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π event loop –¥–ª—è Windows
if sys.platform == 'win32':
    try:
        from asyncio import WindowsSelectorEventLoopPolicy
        asyncio.set_event_loop_policy(WindowsSelectorEventLoopPolicy())
        print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω WindowsSelectorEventLoopPolicy")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å event loop policy: {e}")

# –°–Ω–∞—á–∞–ª–∞ ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from utils.logger import setup_logger
logger = setup_logger()
logger.info("üîß –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º nest_asyncio
try:
    import nest_asyncio
    nest_asyncio.apply()
    logger.info("‚úÖ nest_asyncio –ø—Ä–∏–º–µ–Ω—ë–Ω ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö event loop")
except ImportError as e:
    logger.error("‚ùå nest_asyncio –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install nest_asyncio")
    raise e

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    from bot.application import create_application
    logger.info("‚úÖ –ú–æ–¥—É–ª—å application –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ application: {e}", exc_info=True)
    raise e

try:
    from services.llm import YandexLLM
    logger.info("‚úÖ –ú–æ–¥—É–ª—å llm –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ llm: {e}", exc_info=True)
    raise e

try:
    from config import settings
    logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ settings: {e}", exc_info=True)
    raise e


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM...")
        llm_service = YandexLLM()
        logger.info("‚úÖ LLM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        logger.info("üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        application = create_application(settings.bot_token)
        logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")

        logger.info("üîß –ü–µ—Ä–µ–¥–∞—á–∞ —Å–µ—Ä–≤–∏—Å–∞ –≤ bot_data...")
        application.bot_data["llm_service"] = llm_service
        logger.info("‚úÖ –°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–¥–∞–Ω")

        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        await application.run_polling(
            close_loop=False
        )

    except Exception as e:
        logger.error(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}", exc_info=True)


def run():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º event loop"""
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ run()...")
    
    loop: Optional[asyncio.AbstractEventLoop] = None
    try:
        loop = asyncio.get_running_loop()
        logger.warning("‚ö†Ô∏è –°–æ–±—ã—Ç–∏–π–Ω—ã–π —Ü–∏–∫–ª —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π.")
    except RuntimeError as e:
        logger.debug(f"üîÅ asyncio.get_running_loop() –Ω–µ –∑–∞–ø—É—â–µ–Ω: {e}")
    except Exception as e:
        logger.error(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ loop: {e}")
        return

    try:
        if loop and loop.is_running():
            task = loop.create_task(main())
            return task
        else:
            if loop is None:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
            loop.run_until_complete(main())
    except Exception as e:
        logger.error(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ loop: {e}", exc_info=True)


# üî• –°–∞–º—ã–π –ø–µ—Ä–≤—ã–π –ª–æ–≥ ‚Äî –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç –æ—à–∏–±–∫–∞ –¥–æ —ç—Ç–æ–≥–æ
logger.info("üèÅ –ù–∞—á–∞–ª–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞...")
if __name__ == "__main__":
    run()