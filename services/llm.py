import httpx
import os
import json
from typing import List, Dict
from config import settings
from utils.logger import setup_logger
from services.intent_recognizer import IntentRecognizer  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç

logger = setup_logger()

class PromptManager:
    def __init__(self, prompts_dir: str = "prompts"):
        self.prompts_dir = prompts_dir
        self.intent_recognizer = IntentRecognizer(prompts_dir)
        self._prompt_cache = {}  # –ö—ç—à –ø—Ä–æ–º–ø—Ç–æ–≤
        
    def get_prompt(self, intent_type: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–ø—Ç –ø–æ —Ç–∏–ø—É –∏–Ω—Ç–µ–Ω—Ç–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        if intent_type in self._prompt_cache:
            return self._prompt_cache[intent_type]
            
        path = os.path.join(self.prompts_dir, f"{intent_type}.txt")
        try:
            with open(path, "r", encoding="utf-8") as f:
                prompt = f.read().strip()
                self._prompt_cache[intent_type] = prompt
                return prompt
        except FileNotFoundError:
            logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –ø—Ä–æ–º–ø—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
            # Fallback –Ω–∞ general –ø—Ä–æ–º–ø—Ç
            return self.get_prompt("general")
    
    def determine_intent(self, user_message: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–Ω—Ç–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        return self.intent_recognizer.determine_intent(user_message)

class YandexAPIClient:
    def __init__(self):
        self.api_key = settings.ya_api_key
        self.folder_id = settings.ya_folder_id
        self.model_uri = f"gpt://{self.folder_id}/yandexgpt/latest"  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π URI
        self.base_url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
        self.headers = {
            "Authorization": f"Api-Key {self.api_key}",
            "Content-Type": "application/json",
        }
        self.client = httpx.AsyncClient(timeout=30.0)
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å HTTP-–∫–ª–∏–µ–Ω—Ç"""
        await self.client.aclose()
    
    async def make_request(self, messages: List[Dict]) -> str:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Yandex API"""
        payload = {
            "modelUri": self.model_uri,
            "completionOptions": {
                "temperature": settings.llm_temperature,
                "maxTokens": settings.llm_max_tokens
            },
            "messages": messages
        }

        try:
            response = await self.client.post(self.base_url, headers=self.headers, json=payload)
            response.raise_for_status()
            data = response.json()
            return data["result"]["alternatives"][0]["message"]["text"].strip()
        except httpx.ConnectError:
            logger.error("üî¥ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Yandex LLM")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ò–ò. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç."
        except httpx.HTTPStatusError as e:
            status = e.response.status_code
            if status == 401:
                logger.error("üî¥ –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –Ω–µ–≤–µ—Ä–Ω—ã–π YA_API_KEY")
                return "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π API-–∫–ª—é—á. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ YA_API_KEY."
            elif status == 429:
                logger.error("üî¥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ LLM")
                return "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            else:
                logger.error(f"üî¥ –û—à–∏–±–∫–∞ API: {e}")
                return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."
        except Exception as e:
            logger.error(f"üî¥ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."

class YandexLLM:
    def __init__(self, prompts_dir: str = "prompts"):
        self.prompt_manager = PromptManager(prompts_dir)
        self.api_client = YandexAPIClient()
        logger.info("‚úÖ YandexLLM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Ä–µ—Å—É—Ä—Å—ã"""
        await self.api_client.close()
    
    def select_prompt(self, prompt_name: str) -> str:
        """–í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–º–ø—Ç (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º)"""
        return self.prompt_manager.get_prompt(prompt_name)
    
    def determine_intent(self, user_message: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–Ω—Ç–µ–Ω—Ç (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º)"""
        return self.prompt_manager.determine_intent(user_message)
    
    async def chat(self, user_message: str, history: List[Dict[str, str]], prompt_type: str = "general") -> str:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ò–ò"""
        sys_prompt = self.select_prompt(prompt_type)
        messages = [{"role": "system", "text": sys_prompt}]
        
        for msg in history:
            if msg["role"] in ("user", "assistant"):
                messages.append({
                    "role": msg["role"],
                    "text": msg["content"]
                })
        
        messages.append({"role": "user", "text": user_message})
        
        return await self.api_client.make_request(messages)